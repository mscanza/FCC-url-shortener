/********************************************
 * DO NOT EDIT THIS FILE
 * the verification process may break
 *******************************************/
require('./myApp.js')
var express = require('express');
var app = express();
try{
  var mongoose = require('mongoose');
} catch (e) {
  console.log(e);
}
var fs = require('fs');
var path = require('path');
var bodyParser = require('body-parser');
var router = express.Router();
var dns = require('dns')
var url = require('url')

var enableCORS = function(req, res, next) {
  if (!process.env.DISABLE_XORIGIN) {
    var allowedOrigins = ['https://marsh-glazer.gomix.me','https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin;
    if(!process.env.XORIGIN_RESTRICT || allowedOrigins.indexOf(origin) > -1) {
      console.log(req.method);
      res.set({
        "Access-Control-Allow-Origin" : origin,
        "Access-Control-Allow-Methods" : "GET, POST, OPTIONS",
        "Access-Control-Allow-Headers" : "Origin, X-Requested-With, Content-Type, Accept"
      });
    }
  }
  next();
};

var timeout = 10000;

app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());

// Basic Configuration 
var port = process.env.PORT || 3000;
router.get('/file/*?', function(req, res, next) {
  if(req.params[0] === '.env') { return next({status: 401, message: 'ACCESS DENIED'}) }
  fs.readFile(path.join(__dirname, req.params[0]), function(err, data){
    if(err) { return next(err) }
    res.type('txt').send(data.toString());
  });
});
/** this project needs a db !! **/ 
// mongoose.connect(process.env.MONGOLAB_URI);
app.use(bodyParser.urlencoded({extended: 'false'}));
app.use(bodyParser.json());
app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'views', 'index.html'));
});


router.get('/file/*?', function(req, res, next) {
  if(req.params[0] === '.env') { return next({status: 401, message: 'ACCESS DENIED'}) }
  fs.readFile(path.join(__dirname, req.params[0]), function(err, data){
    if(err) { return next(err) }
    res.type('txt').send(data.toString());
  });
});

router.get('/is-mongoose-ok', function(req, res) {
  if (mongoose) {
    res.json({isMongooseOk: !!mongoose.connection.readyState})
  } else {
    res.json({isMongooseOk: false})
  }
});

/** this project needs to parse POST bodies **/
// you should mount the body-parser here



var ShortURL = require('./myApp.js').ShortenedURLModel


app.get('/api/shorturl/sites', function(req,res) {
ShortURL.find({}, function(err,data) {
if (err) return err;
  res.json(data.map(function(item) {
  return {
  "Website": item.original_url,
    "Shortened URL": item.short_url
  }
  }))
})
})

app.get('/api/shorturl/:short?', function(req,res) {
ShortURL.findOne({short_url: req.params.short}, function(err,data) {
if (err) return err;
  res.redirect(data.original_url)
})
})

app.post('/api/shorturl/new', function(req,res) {
  let short = Math.floor(Math.random() * 2000);
dns.lookup(url.parse(req.body.url).hostname, function(err, address,family) {
  if (address == null) {
  return res.json({"error": "Invalid URL"})
  } else {
  var newUrl = new ShortURL({original_url: req.body.url, short_url: short})
  ShortURL.findOne({original_url: req.body.url}, function(err, data) {
  if (data) {
    res.json({"Message": "This website already has a short URL","original_url": req.body.url, "short_url": data.short_url})
  } else {
    newUrl.save(function(err,data) {
      if (err) return err;
      res.json({"original_url": req.body.url, "short_url": short})
  })
  }
  })
  }
})
});



app.use('/public', express.static(process.cwd() + '/public'));

app.get('/', function(req, res) {
  res.sendFile(path.join(__dirname, 'views', 'index.html'));
});


  
// your first API endpoint... 
app.get("/api/hello", function (req, res) {
  res.json({greeting: 'hello API'});
});

var listener = app.listen(process.env.PORT || 3000 , function () {
  console.log('Your app is listening on port ' + listener.address().port);
});
